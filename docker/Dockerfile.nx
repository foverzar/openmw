FROM devkitpro/devkita64:20241023

SHELL ["/bin/bash", "-c"]

RUN dkp-pacman --noconfirm -R switch-openal-soft && \
    apt update && \
    apt install -y build-essential && \
    mkdir /dependencies

WORKDIR /dependencies

### Dependencies

## OpenSceneGraph
RUN source $DEVKITPRO/switchvars.sh && \
    git clone -b 3.6 https://github.com/foverzar/OpenSceneGraph.git && \
    cd OpenSceneGraph && \
    mkdir switchbuild && cd switchbuild && \
    cmake \
        -G"Unix Makefiles" \
        -DSWITCH_LIBNX=ON \
        -DCMAKE_TOOLCHAIN_FILE="$DEVKITPRO/cmake/Switch.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DPKG_CONFIG_EXECUTABLE="$PORTLIBS_PREFIX/bin/aarch64-none-elf-pkg-config" \
        -DCMAKE_INSTALL_PREFIX="$PORTLIBS_PREFIX" \
        -DOPENGL_PROFILE="GL2" \
        -DDYNAMIC_OPENTHREADS=OFF \
        -DDYNAMIC_OPENSCENEGRAPH=OFF \
        -DBUILD_OSG_PLUGIN_OSG=ON \
        -DBUILD_OSG_PLUGIN_DDS=ON \
        -DBUILD_OSG_PLUGIN_TGA=ON \
        -DBUILD_OSG_PLUGIN_BMP=ON \
        -DBUILD_OSG_PLUGIN_JPEG=ON \
        -DBUILD_OSG_PLUGIN_PNG=ON \
        -DBUILD_OSG_PLUGIN_FREETYPE=ON \
        -DOSG_CPP_EXCEPTIONS_AVAILABLE=TRUE \
        -DOSG_GL1_AVAILABLE=ON \
        -DOSG_GL2_AVAILABLE=ON \
        -DOSG_GL3_AVAILABLE=OFF \
        -DOSG_GLES1_AVAILABLE=OFF \
        -DOSG_GLES2_AVAILABLE=OFF \
        -DOSG_GL_LIBRARY_STATIC=ON \
        -DBUILD_OSG_APPLICATIONS=OFF \
        -DBUILD_OSG_PLUGINS_BY_DEFAULT=OFF \
        -DBUILD_OSG_DEPRECATED_SERIALIZERS=OFF \
        -D_OPENTHREADS_ATOMIC_USE_GCC_BUILTINS=ON \
        .. && \
    make -j `nproc` && make install

## MyGUI
RUN source $DEVKITPRO/switchvars.sh && \
    git clone -b nx https://github.com/foverzar/mygui && \
    cd mygui && \
    mkdir switchbuild && cd switchbuild && \
    cmake \
        -G"Unix Makefiles" \
        -DSWITCH_LIBNX=ON \
        -DCMAKE_TOOLCHAIN_FILE="$DEVKITPRO/cmake/Switch.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DPKG_CONFIG_EXECUTABLE="$PORTLIBS_PREFIX/bin/aarch64-none-elf-pkg-config" \
        -DCMAKE_INSTALL_PREFIX="$PORTLIBS_PREFIX" \
        -DMYGUI_RENDERSYSTEM=ON \
        -DMYGUI_BUILD_DEMOS=OFF \
        -DMYGUI_BUILD_TOOLS=OFF \
        -DMYGUI_BUILD_PLUGINS=OFF \
        -DMYGUI_STATIC=ON \
        -DCMAKE_CXX_STANDARD=14 \
        .. && \
    make -j `nproc` && make install

## Boost
# Load deps
RUN git clone -b boost-1.69.0 https://github.com/boostorg/boost && \
    cd boost && \
    # Replace with patched iostreams and filesystem
    git rm libs/iostreams && \
    git submodule add https://github.com/foverzar/boost-iostreams.git libs/iostreams && \
    git rm libs/filesystem && \
    git submodule add https://github.com/foverzar/boost-filesystem.git libs/filesystem && \
    git submodule update --init && \
    cd libs/iostreams && \
    git checkout boost-1.69.0-nx && \
    cd - && \
    cd libs/filesystem && \
    git checkout boost-1.69.0-nx && \
    cd - && \
    source $DEVKITPRO/switchvars.sh && ./bootstrap.sh --prefix="$PORTLIBS_PREFIX"

COPY project-config.jam ./boost/

# Buld
RUN source $DEVKITPRO/switchvars.sh && \
    cd boost && \
    ./b2 \
        --with-filesystem --with-system --with-program_options --with-iostreams \
        --prefix="$PORTLIBS_PREFIX" \
        architecture=arm address-model=64 \
        toolset=gcc-arm \
        threading=multi threadapi=pthread \
        link=static runtime-link=static \
        cxxflags="-march=armv8-a+crc+crypto -mtune=cortex-a57 -mtp=soft -fPIE -ftls-model=local-exec -ffunction-sections -fdata-sections -D__SWITCH__" \
        cflags="-march=armv8-a+crc+crypto -mtune=cortex-a57 -mtp=soft -fPIE -ftls-model=local-exec -ffunction-sections -fdata-sections -D__SWITCH__" \
        variant=release \
        target-os=bsd \
        -sNO_BZIP2=0 \
        -sNO_ZLIB=0 \
        -sNO_COMPRESSION=0 \
        --reconfigure install

## OpenAL
RUN source $DEVKITPRO/switchvars.sh && \
    git clone https://github.com/fgsfdsfgs/openal-soft && \
    cd openal-soft && \
    make -j `nproc` -f Makefile.nx && \
    make -f Makefile.nx install

COPY build.nx.sh /build.sh

RUN mkdir /openmw
WORKDIR /openmw

ENTRYPOINT ["/build.sh"]